<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bryan Ford&#39;s Home Page</title>
    <link>https://bford.info/draft/</link>
    <description>Recent content on Bryan Ford&#39;s Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bford.info/draft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Are Biometrics a Good Test for Real Unique Personhood?</title>
      <link>https://bford.info/draft/biometric-id/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/biometric-id/</guid>
      <description>Are biometrics good for determining whether a digital identity uniquely represents a real person?
Break this down:
 Does it represent [the characteristics of] a person? Does it uniquely represent a person: i.e., the only identity of that person? Does it uniquely represent a real living person?  Authentication, Identification, and Real Personhood Biometric authentication is practical, and not necessarily a privacy disaster. Biometric template only needs to be stored on the device, &amp;hellip;</description>
    </item>
    
    <item>
      <title>Secure, Scalable Proof-of-Stake Blockchains</title>
      <link>https://bford.info/draft/stake/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/stake/</guid>
      <description>Proof-of-What? Currently-deployed permissionless blockchains such as Bitcoin and Ethereum rely on proof-of-work (PoW) to distribute both the computational networking costs, and the financial rewards, of maintaining and extending the blockchain. In proof-of-work systems, participating miners race (&amp;ldquo;work&amp;rdquo;) to compute solutions to cryptographic puzzles. These puzzles effectively act like self-printed lottery tickets, in that a miniscule fraction of these proof-of-work solutions may be easily verified by anyone as &amp;ldquo;winning&amp;rdquo; the lucky miner the right to add one block to the blockchain and collect associated rewards.</description>
    </item>
    
    <item>
      <title>Selfish Mining in Bitcoin and ByzCoin</title>
      <link>https://bford.info/2016/xx/xx/selfish/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2016/xx/xx/selfish/</guid>
      <description>XXX intro
summary of selfish mining
selfish mining as a transparency problem: you get to build on a blockchain head you haven&#39;t published.
same as transparency problem in Apple FBI case for example; that&#39;s what CoSi is for.
solution: any keyblock you build on is collectively signed, and the next block&#39;s hash covers the last block&#39;s signature.
if you withhold a block, you can&#39;t get a collective signature on it; without that collective signature, you can&#39;t secretly mine a next block on top of it.</description>
    </item>
    
    <item>
      <title>An advanced crypto library for Go</title>
      <link>https://bford.info/2016/03/08/crypto/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2016/03/08/crypto/</guid>
      <description>{{ page.title }} Interesting features:
  An abstract group arithmetic framework for public-key cryptography based on the discrete logarithm problem.
  Several alternative concrete instantiations of this abstract group arithmetic framework, based on the NIST elliptic curve implementations in the Go standard library and in the OpenSSL crypto library, and implementations of both generic Edwards curves and an adaptation of Adam Langley&#39;s Ed25519-curve-specific optimized group arithmetic code to the abstract group API.</description>
    </item>
    
    <item>
      <title>Backdoors, Trusted Servers, and Deanonymization</title>
      <link>https://bford.info/2016/03/08/backdoors/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2016/03/08/backdoors/</guid>
      <description>{{ page.title }} To my knowledge there are currently only two fundamentally distinct approaches to achieving strong anonymity online, and the same legendary computing figure, David Chaum, pioneered both. His first approach, mixes, relay messages over multi-hop paths around the network to obscure their source and destinations. State-of-the-art deployed anonymity systems such as Tor are highly evolved and performance-optimized variants of this basic relaying idea.
Chaum&#39;s second approach, dining cryptographers, instead uses information-coding principles to hide the sender of a message among a group of nodes all of whom seem to be spewing gibberish at once.</description>
    </item>
    
    <item>
      <title>How to prove DNSSEC isn&#39;t a key escrow scheme</title>
      <link>https://bford.info/2016/03/08/dnssec/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2016/03/08/dnssec/</guid>
      <description>{{ page.title }} &amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://bford.info/draft/async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/async/</guid>
      <description>For another thing, I‚Äôm personally not a big believer in the practical value of the asynchronous model anyway. I know I‚Äôm at odds here with most people with a theory/algorithms background; reasonable people may differ. :) Almost every practical distributed system that ever actually gets deployed has timeouts and such buried in it here, there, everywhere. User-experience expectations are synchronous, not asynchronous: even if the underlying protocol is in principle perfectly capable of tolerating arbitrarily-long adversary-controlled propagation delays among honest nodes, the real users relying on the system are going to start complaining rather soon after the expected/normal amount of transaction time elapses.</description>
    </item>
    
    <item>
      <title>Composable Markup (CMark)</title>
      <link>https://bford.info/draft/cmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/cmark/</guid>
      <description>Hyphen  X	[-]	Optional line-breaking hyphen??? &amp;ndash;	‚Äì	[&amp;ndash;]	En-dash or numeric range &amp;mdash;	‚Äî	[&amp;mdash;]	Em-dash &amp;hellip;	‚Ä¶	[&amp;hellip;]	Ellipsis  &amp;ldquo;&amp;hellip;&amp;rdquo;	Quoted string: quotes become left/right
‚èé	[br]	Line break ‚êç	[r]	Carriage return character mark ‚ê§	[n]	Newline character mark ¬∂	[p]	Paragraph mark X	[o&#39;]	Open single quote X	[c&#39;]	Close single quote X	[o&amp;quot;]	Open double quote X	[c&amp;quot;]	Close double quote X	[o&amp;lt;&amp;gt;]	Open angle bracket X	[c&amp;lt;&amp;gt;]	Close angle bracket X	[o&amp;lt;&amp;lt;&amp;gt;&amp;gt;]	Open double angle bracket X	[c&amp;lt;&amp;lt;&amp;gt;&amp;gt;]	Close double angle bracket  Spacing: &amp;quot;‚ÄÅ&amp;quot;	[mq_]	Em quad space &amp;quot;‚ÄÄ&amp;quot;	[nq_]	En quad space &amp;quot;‚ÄÉ&amp;quot;	[m_]	Em space &amp;quot;‚ÄÇ&amp;quot;	[n_]	En space &amp;quot;‚ÄÑ&amp;quot;	[3m_]	Three-per-Em space &amp;quot;‚ÄÖ&amp;quot;	[4m_]	Four-per-Em space &amp;quot;‚ÄÜ&amp;quot;	[6m_]	Six-per-Em space &amp;quot;‚Äá&amp;quot;	[d_]	Figure (digit) space &amp;quot;‚Äà&amp;quot;	[.</description>
    </item>
    
    <item>
      <title>Composable Math Markup (CMath)</title>
      <link>https://bford.info/draft/cmath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/cmath/</guid>
      <description>Symbols Arithmetic Basic:
   Plus sign     ‚àí	[-]	Minus sign   √ó	Multiplication √∑	[d]	Division /	‚ÅÑ	[/]	Fraction slash  Technical: ¬±	[+-]	Plus-minus sign ‚àï	[d/]	Division slash ‚ãÖ	[.]	Multiplication or dot product ‚àö	[root]	Square root ‚àõ	[3root]	Cube root ‚àú	[4root]	Fourth root ‚àû	[inf]	Infinity ‚à∂	[:]	Ratio ‚à∑	[::]	Proportion sum	‚àë	[sum]	Sum prod	‚àè	[prod]	Product ùîº	[expect] Expected value pi	œÄ	[pi]	Mathematical value pi (3.</description>
    </item>
    
    <item>
      <title>Composable Text Markup Language (CTML)</title>
      <link>https://bford.info/draft/ctml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/ctml/</guid>
      <description>CTML is simply an alternate character-level syntax for HTML. It otherwise closes closely to HTML (currently HTML5 in particular), and is designed to be easily convertible both to and from HTML.
The main goal of CTML is to satisfy the CTS metasyntactic discipline, so that CTML can be readily composed with other CTL-compliant languages without escaping. Secondary goals are to be more concise, readable, and easily typeable than HTML, while keeping the syntax simple and readily cross-convertible with HTML.</description>
    </item>
    
    <item>
      <title>Decentralized Update Governance (DUG)</title>
      <link>https://bford.info/draft/follow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/follow/</guid>
      <description>Orthogonal concepts to be defined independently but worked together:
 identification (e.g., by content hash) of current version linkage of versions into a linear series, SkipChain, or TimeTree update authorization by one or quorum of identities authentication of identities (people or devices) eg by signing registration of updates on authoritative registry or registries  checking of witnesses by threshold   definition of unambiguous authoritative chain by timescale?  &amp;ndash; Version Identifier (VID) scheme:</description>
    </item>
    
    <item>
      <title>Delimited Text and Binary Syntax</title>
      <link>https://bford.info/draft/delimited-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/delimited-syntax/</guid>
      <description>or Composable Text/Binary Syntax (CTS/CBS)?
Goals:
 Text format self-describing and human-readable Binary format for compactness and efficiency  Either self-describing or schema-dependent   Easy cross-conversion between text and binary formats  Easy for schemas to define both text and binary equivalents at once   Streamable: encoder can start sending long composites before knowing length Embeddable:  for embeddability, see for example JSON Schema&#39;s desire to be able to embed arbitrary non-JSON data with a MIME Media Type: https://json-schema.</description>
    </item>
    
    <item>
      <title>Efficient Stream Embedding with Composable Binary Encoding (CBE)</title>
      <link>https://bford.info/draft/cbe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/cbe/</guid>
      <description>An old problem in data format design is embedding an arbitrary variable-length byte sequence in a longer one, so that a decoder can tell unambiguously where the embedded string ends. This problem is ubiquitous in the design of machine-readable data formats, which often hierarchically compose large and complex data streams from sequences of nested substrings and strings using simpler encodings. Embedding challenges include encoding and decoding simplicity, keeping space overheads low and predictable for both small and large embedded strings, and allowing for stream processing in which an encoder must start writing an embedded sequence before knowing how long it will be.</description>
    </item>
    
    <item>
      <title>Escaping Escaping Hell with Delimited Resource Identifiers</title>
      <link>https://bford.info/draft/dri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/dri/</guid>
      <description>(XXX rename Composable Resource Identifiers?)
Uniform resource identifiers or URIs were a genuinely great idea and have rightfully become the ubiquitous way to &amp;ldquo;name things&amp;rdquo; on the Internet. As the basis of web addresses or URLs, they are human readable (to varying degrees), manually transcribable, cut-and-pasteable, and have proven incrementally extensible to a vast multitude of schemes. Their later extension to internationalized resource identifiers or IRIs allow people whose native language is not English to type, and view, non-ASCII Unicode characters in web addresses.</description>
    </item>
    
    <item>
      <title>Rethinking Social Media to Escape the Echo Chamber</title>
      <link>https://bford.info/2016/11/13/info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2016/11/13/info/</guid>
      <description>Hillary Clinton&#39;s electoral college defeat has provoked many questions about how so many Americans could have choosen a misogynistic, xenophobic, pathologically lying, authoritarian ideologue as their next President &amp;ndash; and one of many targets of their blame is social media. Compounding its polarizing &amp;ldquo;echo chamber&amp;rdquo; effect, online discussions were tarnished with deliberate misinformation, including incorrect instructions on how to vote. But is the solution for social media companies like Facebook to ``do a better job&amp;rsquo;&amp;rsquo; at curating the world&#39;s content to suppress out false or hateful speech?</description>
    </item>
    
    <item>
      <title>VIPcode: Encoding and Decoding Structured Data with Verifiable Interface Presentations (VIPs)</title>
      <link>https://bford.info/draft/vipcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/draft/vipcode/</guid>
      <description>In this post I would like to introduce VIPcode, a library that encodes and decodes structured data specified by verifiable interface presentations or VIPs in the Go language. In brief, VIPs are presentations or mappings of an abstract wire-format interface into the concrete data types of a specific target language (in this case Go). While embodying all information needed to marshal and unmarshall complex data, VIPs may also be verified automatically for compliance with a language-neutral interface specification, such as a .</description>
    </item>
    
  </channel>
</rss>