<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on Bryan Ford&#39;s Home Page</title>
    <link>https://bford.info/topics/Syntax/</link>
    <description>Recent content in Syntax on Bryan Ford&#39;s Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bford.info/topics/Syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Matchertext: an escape route from language-embedding hell?</title>
      <link>https://bford.info/2023/01/02/matchertext/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2023/01/02/matchertext/</guid>
      <description>We often need to embed strings written in one programming language into code written in another. For example, we routinely embed regular expressions and SQL queries within shell scripts or string literals in C-like languages. HTML pages routinely contain embedded JavaScript and CSS code fragments. We often need to embed one URI into another, such as to formulate a query to a Web service that validates, archives, translates, or otherwise refers to other websites.</description>
    </item>
    
    <item>
      <title>Matchertext: Towards Verbatim Interlanguage Embedding</title>
      <link>https://bford.info/pub/lang/matchertext/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/lang/matchertext/</guid>
      <description>Bryan Ford Abstract: Embedding text in one language within text of another is commonplace for numerous purposes, but usually requires tedious and error-prone “escaping” transformations on the embedded string. We propose a simple cross-language syntactic discipline, matchertext, which enables the safe embedding a string in any compliant language into a string in any other language via simple “copy-and-paste” – in particular with no escaping, obfuscation, or expansion of embedded strings.</description>
    </item>
    
    <item>
      <title>MinML: concise but general markup syntax</title>
      <link>https://bford.info/2022/12/28/minml/</link>
      <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2022/12/28/minml/</guid>
      <description>Could you use a markup syntax that supports the full expressive power and richness of HTML or XML, but is more terse, easier to type, and less frankly ugly? To emphasize text, for example, would it be nice just to write em[emphasize] instead of &amp;lt;em&amp;gt;emphasize&amp;lt;/em&amp;gt;? If so, pleae read on. The tussle between generality and writer-friendliness Markup languages derived from SGML, like HTML and XML, are powerful and have many uses but are verbose and often a pain to write or edit manually.</description>
    </item>
    
    <item>
      <title>Are Only Type Parameters Generic Enough for Go 2 Generics?</title>
      <link>https://bford.info/2019/07/29/go-generics/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/2019/07/29/go-generics/</guid>
      <description>The Go language appears to be getting slightly closer to supporting generics, with the recent release of a new proposal for generics based on type parameters and contracts.
I generally like the direction this proposal is going, with one significant reservation. I feel that the current proposal both unnecessarily limits how &amp;ldquo;generic&amp;rdquo; Go&amp;rsquo;s generics will be, and risks painting the language into a corner in the long term. This is because the proposal single-mindedly assumes that the only compile-time generic parameters we will ever want are type parameters, which seems like an unnecessary and undesirable restriction.</description>
    </item>
    
    <item>
      <title>Parsing Expression Grammars: A Recognition-Based Syntactic Foundation</title>
      <link>https://bford.info/pub/lang/peg/</link>
      <pubDate>Wed, 14 Jan 2004 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/lang/peg/</guid>
      <description>Bryan Ford
Massachusetts Institute of Technology Symposium on Principles of Programming Languages, January 14-16, 2004, Venice, Italy Abstract For decades we have been using Chomsky&#39;s generative system of grammars, particularly context-free grammars (CFGs) and regular expressions (REs), to express the syntax of programming languages and protocols. The power of generative grammars to express ambiguity is crucial to their original purpose of modelling natural languages, but this very power makes it unnecessarily difficult both to express and to parse machine-oriented languages using CFGs.</description>
    </item>
    
    <item>
      <title>Packrat Parsing: Simple, Powerful, Lazy, Linear Time</title>
      <link>https://bford.info/pub/lang/packrat-icfp02/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/lang/packrat-icfp02/</guid>
      <description>Bryan Ford
Massachusetts Institute of Technology International Conference on Functional Programming, October 4-6, 2002, Pittsburgh Abstract Packrat parsing is a novel technique for implementing parsers in a lazy functional programming language. A packrat parser provides the power and flexibility of top-down parsing with backtracking and unlimited lookahead, but nevertheless guarantees linear parse time. Any language defined by an LL(k) or LR(k) grammar can be recognized by a packrat parser, in addition to many languages that conventional linear-time algorithms do not support.</description>
    </item>
    
    <item>
      <title>Packrat Parsing: a Practical Linear-Time Algorithm with Backtracking</title>
      <link>https://bford.info/pub/lang/thesis/</link>
      <pubDate>Tue, 03 Sep 2002 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/lang/thesis/</guid>
      <description>Bryan Ford
Master&#39;s Thesis
Massachusetts Institute of Technology Abstract Packrat parsing is a novel and practical method for implementing linear-time parsers for grammars defined in Top-Down Parsing Language (TDPL). While TDPL was originally created as a formal model for top-down parsers with backtracking capability, this thesis extends TDPL into a powerful general-purpose notation for describing language syntax, providing a compelling alternative to traditional context-free grammars (CFGs). Common syntactic idioms that cannot be represented concisely in a CFG are easily expressed in TDPL, such as longest-match disambiguation and &#34;</description>
    </item>
    
  </channel>
</rss>
