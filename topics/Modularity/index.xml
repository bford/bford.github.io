<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modularity on Bryan Ford&#39;s Home Page</title>
    <link>https://bford.info/topics/Modularity/</link>
    <description>Recent content in Modularity on Bryan Ford&#39;s Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://bford.info/topics/Modularity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rethinking General-Purpose Decentralized Computing</title>
      <link>https://bford.info/pub/os/protean-abs/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/protean-abs/</guid>
      <description>Enis Ceyhun Alp, Eleftherios Kokoris-Kogias, Georgia Fragkouli, and Bryan Ford EPFL - IC - DEDIS   17th Workshop on Hot Topics in Operating Systems (HotOS XVII)
May 12-15, 2019.  Abstract: While showing great promise, smart contracts are difficult to program correctly, as they need a deep understanding of cryptography and distributed algorithms, and offer limited functionality, as they have to be deterministic and cannot operate on secret data.</description>
    </item>
    
    <item>
      <title>CertiKOS: A Certified Kernel for Secure Cloud Computing</title>
      <link>https://bford.info/pub/os/certikos-apsys11/</link>
      <pubDate>Mon, 11 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/certikos-apsys11/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Minion: an all-terrain packet packhorse to jump-start stalled internet transports</title>
      <link>https://bford.info/pub/net/pfldnet10-minion-abs/</link>
      <pubDate>Sun, 28 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/net/pfldnet10-minion-abs/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Advanced Development of Certified OS Kernels</title>
      <link>https://bford.info/pub/os/certified-kernels-abs/</link>
      <pubDate>Thu, 15 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/certified-kernels-abs/</guid>
      <description>Zhong Shao and Bryan Ford Department of Computer Science, Yale University   Yale University Technical Report TR1436
July 15, 2010  Abstract: Operating System (OS) kernels form the bedrock of all system software&amp;mdash;they can have the greatest impact on the resilience, extensibility, and security of today’s computing hosts. A single kernel bug can easily wreck the entire system’s integrity and protection. We propose to apply new advances in certified software to the development of a novel OS kernel.</description>
    </item>
    
    <item>
      <title>Efficient Cross-Layer Negotiation</title>
      <link>https://bford.info/pub/net/nego-abs/</link>
      <pubDate>Thu, 22 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/net/nego-abs/</guid>
      <description>Bryan Ford
	Janardhan Iyengar
	Yale University 	Franklin &amp;amp; Marshall College  Published in Eighth ACM Workshop on Hot Topics in Networks (HotNets-VIII) October 22-23, 2009, New York City, NY, USA Abstract: Internet evolution often depends on either inserting new protocol layers or upgrading existing layers to new protocols, but both of these evolutionary paths are obstructed by the difficulty and inefficiency of determining which protocols a pair of hosts mutually support and prefer.</description>
    </item>
    
    <item>
      <title>Interface and Execution Models in the Fluke Kernel</title>
      <link>https://bford.info/pub/os/atomic-osdi99-abs/</link>
      <pubDate>Wed, 24 Feb 1999 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/atomic-osdi99-abs/</guid>
      <description>Bryan Ford, Mike Hibler, Jay Lepreau, Roland McGrath, and Patrick Tullmann 
Department of Computer Science, University of Utah  3rd Symposium on Operating Systems Design and Implementation
February 22-25, 1999 Abstract:  We have defined and implemented a kernel API that makes every exported operation fully interruptible and restartable, thereby appearing atomic to the user. To achieve interruptibility, all possible kernel states in which a thread may become blocked for a &amp;ldquo;long&amp;rdquo; time are represented as kernel system calls, without requiring the kernel to retain any unexposable internal state.</description>
    </item>
    
    <item>
      <title>The Flux OSKit: A Substrate for Kernel and Language Research</title>
      <link>https://bford.info/pub/os/oskit-sosp16-abs/</link>
      <pubDate>Mon, 06 Oct 1997 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/oskit-sosp16-abs/</guid>
      <description>Bryan Ford, Godmar Back, Greg Benson, Jay Lepreau, Albert Lin, and Olin Shivers 
 Proceedings of the 16th ACM Symposium on Operating System Principles
October 5-8, 1997 Abstract:  Implementing new operating systems is tedious, costly, and often impractical except for large projects. The Flux OSKit addresses this problem in a novel way by providing clean, well-documented OS components designed to be reused in a wide variety of other environments, rather than defining a new OS structure.</description>
    </item>
    
    <item>
      <title>The Flux OS Toolkit: Reusable Components for OS Implementation</title>
      <link>https://bford.info/pub/os/oskit-hotos6-abs/</link>
      <pubDate>Mon, 05 May 1997 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/oskit-hotos6-abs/</guid>
      <description>Bryan Ford, Kevin Van Maren, Jay Lepreau, Stephen Clawson, Bart Robinson, and Jeff Turner
University of Utah 6th Workshop on Hot Topics in Operating Systems (HotOS-VI)
May 5-6, 1997 Abstract:  To an unappreciated degree, research both in operating systems and their programming languages has been severely hampered by the lack of cleanly reusable code providing mundane low-level OS infrastructure such as bootstrap code and device drivers. The Flux OS Toolkit solves this problem by providing a set of clean, well-documented components.</description>
    </item>
    
    <item>
      <title>CPU Inheritance Scheduling</title>
      <link>https://bford.info/pub/os/inherit-sched-abs/</link>
      <pubDate>Wed, 30 Oct 1996 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/inherit-sched-abs/</guid>
      <description>Bryan Ford and Sai R. Susarla  Department of Computer Science, University of Utah  Proceedings of the Second Symposium on Operating Systems Design and Implementation
October 28-31, 1996  Abstract: Traditional processor scheduling mechanisms in operating systems are fairly rigid, often supporting only one fixed scheduling policy, or, at most, a few &amp;ldquo;scheduling classes&amp;rdquo; whose implementations are closely tied together in the OS kernel. This paper presents CPU inheritance scheduling, a novel processor scheduling framework in which arbitrary threads can act as schedulers for other threads.</description>
    </item>
    
    <item>
      <title>In-Kernel Servers on Mach 3.0: Implementation and Performance</title>
      <link>https://bford.info/pub/os/inks-abs/</link>
      <pubDate>Mon, 19 Apr 1993 00:00:00 +0000</pubDate>
      
      <guid>https://bford.info/pub/os/inks-abs/</guid>
      <description>Jay Lepreau, Mike Hibler, Bryan Ford, and Jeffrey Law  Department of Computer Science, University of Utah  Proceedings of the Third USENIX Mach Symposium
April 1993  Abstract: The advantages in modularity and power of microkernel-based operating systems such as Mach 3.0 are well known. The existing performance problems of these systems, however, are significant. Much of the performance degradation is due to the cost of maintaining separate protection domains, traversing software layers, and using a semantically rich inter-process communication mechanism.</description>
    </item>
    
  </channel>
</rss>
